using System;
using Model.Model;
using CustomExtensions;
using GlobalBLL;

namespace BLL.BLL
{
    /// <summary>
    /// -
    /// </summary>
    [Serializable]
    public partial class LC_User : BLLBase
    {
        public LC_User()
        {}
        /// <summary>
        /// 注册用户
        /// </summary>
        /// <param name="lC_User"></param>
        /// <returns></returns>
        public static Tuple<bool, string> Add(Model.Model.LC_User lC_User,GlobalBLL.UserLoginVO loginvo, string LogisticsUid="")
        {
            return DAL.DAL.LC_User.Add(lC_User, loginvo, LogisticsUid);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="web"></param>
        /// <returns></returns>
        public static (bool, string) BindUser(HttpContextBase web)
        {
            var myuservo = web.GetMyLoginUserVO();
            string Lineletter = web.GetValue("Lineletter"); //货号字母
            string logistics = web.GetValue("logistics"); //物流公司ID
            string NickName = web.GetValue("NickName"); //昵称
            long phone = web.GetValue<long>("phone");//电话
            int sheng = web.GetValue<int>("sheng");
            int shi = web.GetValue<int>("shi");
            int qu = web.GetValue<int>("qu");

            if (NickName.StrIsNull())
                return (false, "昵称不能为空!");
            if (phone <= 0)
                return (false, "联系方式不能为空!");

            switch (myuservo.accountType)
            {
                case AccountTypeEnum.普通用户账号:
                    //注册普通账号
                    if (logistics.StrIsNull())
                        return (false, "物流公司ID不能为空!");
                    if (sheng <= 0)
                        return (false, "省不能为空!");
                    if (shi <= 0)
                        return (false, "市不能为空!");
                    if (qu <= 0)
                        return (false, "区不能为空!");
                    return DAL.DAL.LC_User.OrdinaryAccountBind(myuservo, NickName, phone, logistics, sheng, shi, qu);
                case AccountTypeEnum.物流公司员工账号:
                    return DAL.DAL.LC_User.EmployeeAccountBind(myuservo, NickName, phone, logistics);
                case AccountTypeEnum.物流账号:
                    if (sheng <= 0)
                        return (false, "省不能为空!");
                    if (shi <= 0)
                        return (false, "市不能为空!");
                    if (qu <= 0)
                        return (false, "区不能为空!");
                    //查看绑定的物流是不是自己
                    if (myuservo.uid.Equals(logistics, StringComparison.OrdinalIgnoreCase))
                    {
                        return (false, "不能绑定自己!");
                    }
                    return DAL.DAL.LC_User.LogisticsAccountBind(myuservo, NickName, phone, logistics, sheng, shi, qu, Lineletter);
            }
            return (false, "参数不正确!");
        }

        /// <summary>
        /// 验证是否需要注册
        /// </summary>
        /// <param name="web"></param>
        /// <returns></returns>
        public static (bool, string, object) GetToRegUser(HttpContextBase web)
        {
            var myuservo = web.GetMyLoginUserVO();
            return DAL.DAL.LC_User.GetToRegUser(myuservo);
        }

        /// <summary>
        /// 添加或者更新账号
        /// </summary>
        /// <param name="web"></param>
        /// <param name="suser"></param>
        /// <param name="rtype">类型</param>
        /// <returns></returns>
        public static (bool, string, Model.Model.LC_User suser) AddOrUpdateUserVO(HttpContextBase web,Model.Model.LC_User suser)
        {
            //验证数据是否正确
            if (suser.WX_OpenID.StrIsNull())
                return (false, "OPENID不能为空!",null);
            return DAL.DAL.LC_User.AddOrUpdateUserVO(suser);
        }
    }
}